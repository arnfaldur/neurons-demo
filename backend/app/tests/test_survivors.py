from fastapi import status
from starlette.testclient import TestClient


def test_survivor_creation(test_client: TestClient):
    survivor = {
        "name": "John Doe",
        "age": 30,
        "gender": "male",
        "last_location": [3, 4],
    }
    post_response = test_client.post(
        "/survivors",
        json=survivor,
    )
    assert post_response.status_code == status.HTTP_200_OK
    # generated by the primary key
    survivor_id = post_response.json()["id"]

    # ensure all sent values match values returned from API
    get_response = test_client.get(f"/survivors/{survivor_id}")
    for key in survivor:
        assert get_response.json()[key] == survivor[key]


def test_survivor_failed_creation(test_client: TestClient):
    bad_survivors = [
        {"name": 123, "age": 30, "gender": "male", "last_location": [3, 4]},
        {"name": "John", "age": 23, "gender": "male", "last_location": [3, 4, 5]},
        {"name": "John", "age": 23, "gender": "male", "last_location": "(3,4)"},
    ]
    for bad_survivor in bad_survivors:
        post_response = test_client.post(
            "/survivors",
            json=bad_survivor,
        )
        assert post_response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY


def test_survivor_update(test_client: TestClient):
    # This would ideally be found by searching,
    # but we rely on the mock data and serial primary keys instead
    survivor_id = 1

    # ensure all sent values match values returned from API
    get_response = test_client.get(f"/survivors/{survivor_id}")

    survivor = get_response.json()

    survivor["name"] = "Marcus"
    survivor["age"] = 39
    survivor["gender"] = "male"
    survivor["last_location"] = [20, 20]
    for key in [
        "name",
        "age",
        "gender",
        "last_location",
    ]:
        # just check updated values for non-equality
        assert get_response.json()[key] != survivor[key]

    post_response = test_client.put(f"/survivors/{survivor_id}", json=survivor)
    assert post_response.status_code == status.HTTP_200_OK

    # ensure all sent values match values returned from API
    get_response = test_client.get(f"/survivors/{survivor_id}")
    for key in survivor:
        assert get_response.json()[key] == survivor[key]


def test_survivor_update_location(test_client: TestClient):
    # This would ideally be found by searching,
    # but we rely on the mock data and serial primary keys instead
    survivor_id = 1

    for location in [[-10, 10], [42, 42], [3.14, 1.59]]:

        post_response = test_client.post(
            f"/survivors/{survivor_id}/location", json=location
        )
        assert post_response.status_code == status.HTTP_200_OK

        # get survivor and check if location matches updated one
        get_response = test_client.get(f"/survivors/{survivor_id}")
        assert get_response.json()["last_location"] == location
