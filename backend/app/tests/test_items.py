from fastapi import status
from starlette.testclient import TestClient


def test_survivor_creation_with_items(test_client: TestClient):
    survivor = {
        "name": "John Doe",
        "age": 30,
        "gender": "male",
        "last_location": [3, 4],
        "inventory": {
            "water": 4,
            "food": 5,
            "medication": 6,
            "ammunition": 7,
        },
    }
    post_response = test_client.post(
        "/survivors",
        json=survivor,
    )
    assert post_response.status_code == status.HTTP_200_OK
    # generated by the primary key
    survivor_id = post_response.json()["id"]

    # ensure all sent values match values returned from API
    get_response = test_client.get(f"/survivors/{survivor_id}")
    for key in [
        "name",
        "age",
        "gender",
        "last_location",
    ]:
        assert get_response.json()[key] == survivor[key]
    for key in [
        "water",
        "food",
        "medication",
        "ammunition",
    ]:
        assert get_response.json()["inventory"][key] == survivor["inventory"][key]


def test_trade_with_self(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[0],
            "offered": {
                "water": 1,
                "medication": 2,
                "ammunition": 2,
            },
            "requested": {
                "water": 3,
                "food": 1,
                "medication": 2,
            },
        },
    )
    assert get_response.json()["detail"] == "A survivor can't trade with themselves"
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST


def test_unfair_trade(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {
                "water": 1,
                "medication": 2,
                "ammunition": 2,
            },
            "requested": {
                "water": 3,
                "food": 1,
                "medication": 2,
            },
        },
    )
    assert (
        get_response.json()["detail"]
        == "Unfair trade, offered value: 10, requested value: 19"
    )
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST


def test_trade_invalid_offer(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {
                "medication": -8,
            },
            "requested": {},
        },
    )
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST
    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {},
            "requested": {
                "medication": -2,
            },
        },
    )
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST


def test_trade_too_much_offered(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {
                "medication": 4,
            },
            "requested": {
                "water": 1,
                "medication": 2,
            },
        },
    )
    assert get_response.json()["detail"] == "Trader doesn't have offered items"
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST


def test_trade_too_much_requested(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {
                "water": 1,
            },
            "requested": {
                "ammunition": 4,
            },
        },
    )
    assert get_response.json()["detail"] == "Survivor doesn't have requested items"
    assert get_response.status_code == status.HTTP_400_BAD_REQUEST


def test_trade_success(test_client: TestClient):
    get_response = test_client.get("/survivors")
    survivor_ids = list(map(lambda s: s["id"], get_response.json()))

    get_response = test_client.post(
        f"/survivors/{survivor_ids[0]}/trade",
        json={
            "trader_id": survivor_ids[1],
            "offered": {
                "water": 2,
            },
            "requested": {
                "medication": 3,
                "ammunition": 2,
            },
        },
    )
    assert get_response.status_code == status.HTTP_200_OK

    # check if inventories have been updated.
    # everyone starts with 3 of each item
    get_response = test_client.get("/survivors")
    survivor_inventory = list(
        filter(lambda s: s["id"] == survivor_ids[0], get_response.json())
    )[0]["inventory"]
    assert survivor_inventory == {
        "water": 3,
        "food": 3,
        "medication": 0,
        "ammunition": 1,
    }
    trader_inventory = list(
        filter(lambda s: s["id"] == survivor_ids[1], get_response.json())
    )[0]["inventory"]
    assert trader_inventory == {
        "water": 1,
        "food": 3,
        "medication": 3,
        "ammunition": 3,
    }
